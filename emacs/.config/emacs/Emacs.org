#+startup: overview
#+title: Emacs Configuration
#+property: header-args :emacs-lisp :tangle ~/dotfiles/emacs/.config/emacs/init.el :mkdirp yes

* Table Of Contents
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#table-of-contents][Table Of Contents]]
- [[#about][About]]
- [[#basic-configuration][Basic Configuration]]
- [[#optimizations][Optimizations]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#ivy-rich-optimization][Ivy-rich optimization]]
- [[#package-system-setup][Package System Setup]]
- [[#font-configuration][Font Configuration]]
- [[#keybinding-configuration][Keybinding Configuration]]
- [[#ui-configuration][UI Configuration]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#color-theme][Color Theme]]
    - [[#modus-themes][Modus Themes]]
    - [[#doom-themes][Doom Themes]]
    - [[#set-up-ur-theme][Set up ur theme.]]
  - [[#better-modeline][Better Modeline]]
  - [[#which-key][Which Key]]
  - [[#savehist-prescient][Savehist, Prescient]]
  - [[#vertico-marginalia-conslult-savehist-prescient][Vertico, Marginalia, Conslult, savehist, Prescient]]
  - [[#helm][Helm]]
  - [[#ivy-swiper-counsel][Ivy, Swiper, Counsel]]
  - [[#diminish][Diminish]]
  - [[#helpful-help-commands][Helpful Help Commands]]
  - [[#text-scaling][Text Scaling]]
  - [[#smooth-scrolling][Smooth Scrolling]]
- [[#org-mode][Org Mode]]
  - [[#better-font-faces][Better Font Faces]]
  - [[#basic-config][Basic Config]]
    - [[#nicer-heading-bullets][Nicer Heading Bullets]]
    - [[#center-org-buffers][Center Org Buffers]]
  - [[#create-table-of-contents-with-ease][Create table of contents with ease]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#structure-templates][Structure Templates]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
- [[#development][Development]]
  - [[#magit][Magit]]
  - [[#languages][Languages]]
    - [[#ide-features-with-lsp-mode][IDE Features with lsp-mode]]
      - [[#lsp-mode][lsp-mode]]
      - [[#lsp-ui][lsp-ui]]
      - [[#lsp-treemacs][lsp-treemacs]]
      - [[#lsp-ivy][lsp-ivy]]
    - [[#nix][Nix]]
    - [[#lua][Lua]]
    - [[#haskell][Haskell]]
    - [[#guile][Guile]]
    - [[#common-lisp][Common Lisp]]
    - [[#cc][C/C++]]
  - [[#eglot][Eglot]]
  - [[#company-mode][Company Mode]]
  - [[#yasnippet][Yasnippet]]
  - [[#commenting][Commenting]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#parinfer][Parinfer]]
- [[#terminals][Terminals]]
  - [[#term-mode][term-mode]]
    - [[#better-term-mode-colors][Better term-mode colors]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
- [[#file-management][File Management]]
  - [[#dired][Dired]]
- [[#misc][Misc]]
  - [[#bluetooth][Bluetooth]]
  - [[#emacs-guix][Emacs-guix]]
- [[#guix-manifest][Guix Manifest]]
:END:

* About
This file contains configuration of my GNU Emacs.
Hightly inspired by [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters]] YouTube channel and configs of other people.

* Basic Configuration
This section configures basic UI settings that remove unneeded elements to make Emacs look more minimal, disables and enables some small features.

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  
  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 160)
  (defvar efs/default-variable-font-size 160)
  
  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))
  
  (setq inhibit-startup-message t)
  
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  
  (menu-bar-mode -1)            ; Disable the menu bar
  
  ;; Set up the visible bell
  (setq visible-bell nil)
  
  ;; Set up the ring bell
  (setq ring-bell-function 'ignore)
  
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (menu-bar--display-line-numbers-mode-relative)
  
  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
  
  ;; For correct fullscreen mode
  (setq frame-resize-pixelwise t)
  
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
  ;; Disable blink cursor
  (blink-cursor-mode 0)
  
  ;; Accept 'y' and 'n' rather than 'yes' and 'no'.
  (defalias 'yes-or-no-p 'y-or-n-p)
  
  ;; Stop creating backup and autosave files.
  (setq make-backup-files nil
        auto-save-default nil)
  
  ;; (server-start)
#+end_src

* Optimizations
** Garbage Collection
=gc-cons-threshold= determines how many bytes can be allocated without triggering a garbage collection. The default value is =800000= (i.e., ~800kB).

I try to set it to some =higher value= because with =default= one it lags when =lsp-mode= is active and do garbage collection when Emacs =looses focus=.

#+begin_src emacs-lisp
  ;; Garbage collection
  (setq gc-cons-threshold (* 50 1000 1000))
  ;; (add-hook 'focus-out-hook 'garbage-collect)
  
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
  
  ;; Return gc-threshold to normal value
  (run-with-idle-timer
   5 nil
   (lambda ()
     (setq gc-cons-threshold (* 2 1000 1000))
     (message "gc-cons-threshold restored to %s"
              gc-cons-threshold)))
  
  ;; (use-package esup)
#+end_src

** Ivy-rich optimization
Switch buffer menu lags with enabled =ivy-rich= . Found [[https://github.com/Yevgnen/ivy-rich/issues/87#issuecomment-689581896][possible workaraund]]. 
It creates a =cache= for transformations. Also =re-builds= the cache time to time when =idle=.

#+begin_src emacs-lisp
  (eval-after-load 'ivy-rich
    (progn
      (defvar ek/ivy-rich-cache
        (make-hash-table :test 'equal))
  
      (defun ek/ivy-rich-cache-lookup (delegate candidate)
        (let ((result (gethash candidate ek/ivy-rich-cache)))
          (unless result
            (setq result (funcall delegate candidate))
            (puthash candidate result ek/ivy-rich-cache))
          result))
  
      (defun ek/ivy-rich-cache-reset ()
        (clrhash ek/ivy-rich-cache))
  
      (defun ek/ivy-rich-cache-rebuild ()
        (mapc (lambda (buffer)
                (ivy-rich--ivy-switch-buffer-transformer (buffer-name buffer)))
              (buffer-list)))
  
      (defun ek/ivy-rich-cache-rebuild-trigger ()
        (ek/ivy-rich-cache-reset)
        (run-with-idle-timer 1 nil 'ek/ivy-rich-cache-rebuild))
  
      (advice-add 'ivy-rich--ivy-switch-buffer-transformer :around 'ek/ivy-rich-cache-lookup)
      (advice-add 'ivy-switch-buffer :after 'ek/ivy-rich-cache-rebuild-trigger)))
#+end_src
* Package System Setup
Emacs has a builtin package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration. [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of packages.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  ;;  Effectively replace use-package with straight-use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;; (setq straight-check-for-modifications '(check-on-save find-when-checking))
  #+end_src

* Font Configuration

#+begin_src emacs-lisp
  (if (equal (system-name) "guixsd")
    (setq my-fixed-font-name "mononoki")
  (setq my-fixed-font-name "Mononoki Nerd Font"))
  
  (defun efs/set-font-faces ()
    (message "Setting faces!")
    (set-face-attribute 'default nil :font my-fixed-font-name :height efs/default-font-size)
  
    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font my-fixed-font-name :height efs/default-font-size)
  
    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-font-size))
  
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (efs/set-font-faces))))
    (efs/set-font-faces))
#+end_src

* Keybinding Configuration
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "c" '(:ignore t :which-key "configs")
      "ca" '((lambda () (interactive) (find-file "~/dotfiles/emacs/.config/emacs/Emacs.org")) :which-key "Emacs.org")
      "cb" '((lambda () (interactive) (find-file "~/dotfiles/desktop/Desktop.org")) :which-key "Desktop.org")
      "cc" '((lambda () (interactive) (find-file "~/dotfiles/guix/.config/guix/system/config.scm")) :which-key "config.scm")
      "cd" '((lambda () (interactive) (find-file "~/dotfiles/awesome/.config/awesome/rc.lua")) :which-key "rc.lua")
      "ce" '((lambda () (interactive) (find-file "~/dotfiles/xmonad/.xmonad/Xmonad.org")) :which-key "Xmonad.org")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)

    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package undo-tree
    :after evil
    :config
    (global-undo-tree-mode 1))
#+end_src

* UI Configuration
** Command Log Mode
[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!

#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

** Color Theme
*** Modus Themes
[[https://protesilaos.com/modus-themes/][The Modus themes]] are designed for accessible readability. They conform with the highest standard for color contrast between any given combination of background and foreground values. This corresponds to the WCAG AAA standard, which specifies a minimum rate of distance in relative luminance of 7:1.

#+begin_src emacs-lisp
  (use-package modus-themes)
#+end_src

*** Doom Themes
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes. Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best. You can also run M-x counsel-load-theme to choose between them easily.

#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src

*** Set up ur theme.

#+begin_src emacs-lisp
  ;; Color theme
  ;; (if (equal (system-name) "void")
  ;;     (load-theme 'modus-operandi t)
  ;;   (load-theme 'modus-vivendi t))
  (load-theme 'modus-vivendi t)
#+end_src

** Better Modeline
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs. The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you’ll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package all-the-icons)
  
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :after evil
    ;; :init (which-key-mode)
    :diminish which-key-mode
    :custom
    (which-key-idle-delay 1)
    :config
    (which-key-mode))
  
  ;; (use-package which-key-posframe
  ;;   :load-path "~/.config/emacs/elpa/which-key-posframe-20190427.1103/which-key-posframe.el"
  ;;   :config
  ;;   (which-key-posframe-mode))
#+end_src

** Savehist, Prescient

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode 1))
  
  (use-package prescient
    :disabled
    :init
    (setq prescient-persist-mode 1))
#+end_src

** Vertico, Marginalia, Conslult, savehist, Prescient
[[https://github.com/minad/vertico][Vertico]] provides a minimalistic vertical completion UI, which is based on the default completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :disabled
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode 1))
  
  (use-package marginalia
    :disabled
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode 1))
  
  (use-package consult
    :disabled
    :after vertico
    :bind
    (("C-s" . consult-line)
     ("C-M-l" . consult-imenu)
     ("C-M-j" . consult-buffer)
     :map minibuffer-local-map
     ("C-r" . consult-history))
    :custom
    (completion-in-region-function #'consult-completion-in-region))
#+end_src

** Helm

#+begin_src emacs-lisp
  (use-package helm
    :disabled
    :bind ("M-x" . helm-M-x)
    :config
    (setq completion-styles '(flex))
    (setq helm-display-function 'helm-display-buffer-in-own-frame)
    :init
    (helm-mode 1))
#+end_src
** Ivy, Swiper, Counsel
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. =Counsel= is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands. =Swiper= is an alternative to isearch that uses ivy to show an overview of all matches.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           ;; :map ivy-minibuffer-map
           ;; ("TAB" . ivy-alt-done)
           ;; ("C-l" . ivy-alt-done)
           ;; ("C-j" . ivy-next-line)
           ;; ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ;; ("C-k" . ivy-previous-line)
           ;; ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ;; ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    ;; (setq ivy-wrap t)
    (setq ivy-use-selectable-prompt 1)
    (ivy-mode 1))
  
  (use-package ivy-prescient
    :after ivy
    :custom
    (prescient-persist-mode t)
    :config
    (ivy-prescient-mode 1))
  
  (use-package ivy-rich
    ;; :init (ivy-rich-mode 1)
    :after ivy
    :config
    (ivy-rich-mode 1))
  
  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
  
  (use-package swiper
    :commands swiper)
  
  (use-package ivy-posframe
    :disabled
    :after ivy
    :custom
    (ivy-posframe-display-functions-alist
     '((swiper          . ivy-posframe-display-at-point)
       (complete-symbol . ivy-posframe-display-at-point)
       (counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
       (t               . ivy-posframe-display)))
    (ivy-posframe-parameters 
     '((alpha . 80)                                   
       ;; (parent-frame nil)
       (left-fringe . 7)                                                   
       (right-fringe . 7)))
    :config 
    (ivy-posframe-mode 1))
#+end_src
** Diminish
[[https://github.com/emacsmirror/diminish][This]] package implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs’ =describe-= command buffers. For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling
This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen. We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale. You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
  
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
  
  (efs/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** Smooth Scrolling
[[https://github.com/aspiers/smooth-scrolling][This package]] offers a minor mode which make emacs =scroll smoothly=. It keeps the point away from the top and bottom of the current buffer's window in order to keep lines of context around the point visible as much as possible, whilst minimising the frequency of sudden scroll jumps which are visually confusing.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :defer t
    :commands smooth-scrolling-mode)
    ;; :custom
    ;; (smooth-scrolling-mode 1))
#+end_src

* Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces
The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document in =org-mode=. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    ;; (font-lock-add-keywords 'org-mode
    ;;                         '(("^ *\\([-]\\) "
    ;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
  
    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))
#+end_src

** Basic Config
This section contains the basic configuration for =org-mode=.

#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode 1)
    (electric-indent-local-mode -1)
    (variable-pitch-mode 1)
    (visual-line-mode 0))
  
  (use-package org
    ;; :defer t
    ;; :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    ;; (setq org-ellipsis " ▾")
  
    ;; Place for Org Agenda config
  
    (efs/org-font-setup))
#+end_src

*** Nicer Heading Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in org-mode buffers with nicer looking characters that you can control. Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp
;; (use-package org-bullets
;;   :after org
;;   :hook (org-mode . org-bullets-mode)
;;   :custom
;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Center Org Buffers
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

#+begin_src emacs-lisp
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  
  (use-package visual-fill-column
    ;; :disabled
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Create table of contents with ease
[[https://github.com/alphapapa/org-make-toc][This package]] makes it easy to have one or more customizable tables of contents in Org files. They can be updated manually, or automatically when the file is saved. Links to headings are created compatible with GitHub’s Org renderer.

#+begin_src emacs-lisp
  (straight-use-package 'org-make-toc)
  (with-eval-after-load 'org
    (require 'org-make-toc))
#+end_src

** Configure Babel Languages
To execute or export code in =org-mode= code blocks, you’ll need to set up =org-babel-load-languages= for each language you’d like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (lua . t)
        (haskell . t)
        (python . t)))
  
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Structure Templates
Org Mode’s [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=. For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("xm" . "src xml"))
    (add-to-list 'org-structure-template-alist '("co" . "src conf"))
    (add-to-list 'org-structure-template-alist '("lu" . "src lua"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme")))
#+end_src

** Auto-tangle Configuration Files
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Development
** Magit

#+begin_src emacs-lisp  
  (use-package magit
    :commands magit-status)  
#+end_src

** Languages
*** IDE Features with lsp-mode
**** lsp-mode
We use the excellent[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via “language servers” that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode= ’s default keybindings will be added. I highly recommend using the prefix to find out what you can do with lsp-mode in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp
;; (defun efs/lsp-mode-setup ()
;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
;;   (lsp-headerline-breadcrumb-mode))

;; (use-package lsp-mode
;;   :commands (lsp lsp-deferred)
;;   :hook (lsp-mode . efs/lsp-mode-setup)
;;   :init
;;   (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
;;   :config
;;   (lsp-enable-which-key-integration t))
#+end_src

**** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE. Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp
;; (use-package lsp-ui
;;   :hook (lsp-mode . lsp-ui-mode)
;;   :custom
;;   (lsp-ui-doc-position 'bottom))
#+end_src

**** lsp-treemacs
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x= :

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
;; (use-package lsp-treemacs
;;   :after lsp)
#+end_src

**** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what you’re looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x= :

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
;; (use-package lsp-ivy
;;   :after lsp-mode)
#+end_src

*** Nix
Nix expressions language used in Nix package manager and NixOS.

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "//.nix//'"
    :hook (nix-mode ;; . lsp-deferred
           ))
#+end_src

*** Lua

#+begin_src emacs-lisp
  (use-package lua-mode
    ;; :disabled
    :mode "//.lua'"
    ;; :hook (lua-mode ;; . lsp-deferred)
    )
#+end_src

*** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    ;; :disabled
    :mode "//.hs'"
    ;; :hook (haskell-mode ;; . lsp-deferred)
    )
#+end_src

*** Guile
Set guile as default scheme dialect to avoid annoying dialogs.

#+begin_src emacs-lisp
  (use-package geiser
    :commands geiser
    :config
    (setq geiser-scheme-implementation 'guile))
  
  (use-package geiser-guile
    :after geiser)
#+end_src

*** Common Lisp

#+begin_src emacs-lisp
  ;; (if (equal (system-name) "guixsd")
  ;;     (use-package slime
  ;;       :straight nil
  ;;       :commands slime
  ;;       :config
  ;;       (setq lisp-inferior-program "sbcl --noinform --no-linedit"))
  ;;   (use-package slime
  ;;     :commands slime
  ;;     :config
  ;;     (setq lisp-inferior-program "sbcl --noinform --no-linedit")))
  
  (use-package slime
    :commands slime
    :config
    (setq inferior-lisp-program "sbcl --noinform --no-linedit"))
#+end_src

*** C/C++

** Eglot
[[https://github.com/joaotavora/eglot][Eglot]] is an Emacs =LSP= client. It's more minimal than lsp-mode.

#+begin_src emacs-lisp
  (use-package eglot
    :defer t)
#+end_src

** Company Mode
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindings a little more useful ( =TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  (use-package company
    ;; :ensure t
    :defer t
    ;; :after lsp-mode
    ;; :hook (after-init . global-company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          ;; (:map lsp-mode-map
          ;;  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-tooltip-limit 5)
    (company-minimum-prefix-length 3)
    (company-idle-delay 0.3)
    (company-selection-wrap-around t)
    (company-require-match 'never))
  
  ;; (use-package company-box
    ;; :hook (company-mode . company-box-mode))
#+end_src

** Yasnippet
[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more.

#+begin_src emacs-lisp
  ;; Collection of snippets
  (use-package yasnippet-snippets
    :defer t)
  
  (use-package yasnippet                  ; Snippets
    :defer t
    ;; :ensure t
    :config
    (setq
     yas-verbosity 1                      ; No need to be so verbose
     yas-wrap-around-region t)
  
    (with-eval-after-load 'yasnippet
      (setq yas-snippet-dirs '(yasnippet-snippets-dir)))
  
    (yas-reload-all)
    ;; (yas-global-mode)
    )
#+end_src

** Commenting
Emacs’ built in commenting functionality =comment-dwim= (usually bound to =M-;= ) doesn’t always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior. I’ve bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs’ =M-;= binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Parinfer
[[https://github.com/DogLooksGood/parinfer-mode][Parinfer]] is a proof-of-concept editor mode for Lisp programming languages. It will infer some changes to keep Parens and Indentation inline with one another. Parinfer consists of two modes:

- *Indent Mode*
      Indent Mode gives you full control of indentation, while Parinfer corrects parens.

- *Paren Mode*
      Paren Mode gives you full control of parens, while Parinfer corrects indentation.

#+begin_src emacs-lisp
;; (use-package parinfer
;;   :bind
;;   ("C-," . parinfer-toggle-mode)
;;   :init
;;   (progn
;;     (setq parinfer-extensions
;;           '(defaults       ; should be included.
;;             pretty-parens  ; different paren styles for different modes.
;;             evil           ; If you use Evil.
;;             ;; lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
;;             ;; paredit        ; Introduce some paredit commands.
;;             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
;;             smart-yank))   ; Yank behavior depend on mode.
;;     (add-hook 'clojure-mode-hook #'parinfer-mode)
;;     (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
;;     (add-hook 'common-lisp-mode-hook #'parinfer-mode)
;;     (add-hook 'scheme-mode-hook #'parinfer-mode)
;;     (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+end_src

* Terminals
** term-mode
=term-mode= is a built-in terminal emulator in Emacs. Because it is written in Emacs Lisp, you can start using it immediately with very little configuration. If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably. However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=. The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=. =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal. While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings. If you’re just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil’s insert mode (press =i=). You will automatically be switched back to =line-mode= when you enter Evil’s normal mode (press =ESC=).

Run a terminal with =M-x term=!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil’s Insert mode

#+begin_src emacs-lisp
  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args
  
    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

*** Better term-mode colors
The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to. Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program. Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** Eshell
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs’ own shell implementation written in Emacs Lisp. It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc). It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=). Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don’t work as well. However, many of these limitations can be dealt with by good configuration and installing external packages, so don’t let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:

- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :commands eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'robbyrussell))
#+end_src

** Vterm

#+begin_src emacs-lisp
  (if (equal (system-name) "guixsd")
      (use-package vterm
        ;; :ensure nil
        :straight nil
        :commands vterm)
    (use-package vterm
      :commands vterm))
  
    ;; (use-package vterm
    ;;   :commands vterm)
#+end_src

* File Management
** Dired
Dired is a computer program for editing file system directories. It typically runs inside the Emacs text editor as a specialized mode, though standalone versions have been written. Dired was the first file manager, or visual editor of file system information.

#+begin_src emacs-lisp
  (use-package dired
    ;; :ensure nil
    :straight nil
    :defer t
    :hook (dired-mode . dired-hide-details-mode)
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom
    (dired-async-mode t)
    (dired-dwim-target t)
    (dired-listing-switches "-agho --group-directories-first")
    (wdired-allow-to-change-permissions t)
    (wdired-create-parent-directories t)
    (diredfl-global-mode t)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
  
  (use-package diredfl
    :commands (dired dired-jump))
  
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  
  (use-package dired-open
    :custom
    (dired-open-extensions '(("png" . "imv")
                             ("mkv" . "mpv")
                             ("odt" . "libreoffice")
                             ("ods" . "libreoffice")
                             ("docx" . "libreoffice")
                             ("doc" . "libreoffice")
                             ("pptx" . "libreoffice")
                             ("pdf" . "evince"))))
#+end_src

* Misc
** Bluetooth
[[https://gitlab.com/rstocker/emacs-bluetooth][This package]] provides a simple Bluetooth mode that can be used to manage Bluetooth devices on GNU/Linux using GNU Emacs.

Implemented features are:

  - (un-)pairing devices
  - (dis-)connecting devices or single profiles of devices
  - discovery mode
  - setting device properties (alias, blocked, trusted)
  - setting adapter properties (powered, discoverable, pairable)
  - showing device information (alias, address, RSSI, class, services)
  - Imenu integration
    
#+begin_src emacs-lisp
  (use-package bluetooth
    :commands bluetooth-list-devices)
#+end_src

** Emacs-guix
[[https://github.com/alezost/guix.el][Emacs-Guix]] (aka guix.el) provides various features and tools for GNU Guix package manager.

It allows you to manage your Guix profile(s) from Emacs: =to install, upgrade and remove packages=, to switch and remove profile generations, to display all available info about packages and to do many other things.

If you are Evil user, note that =Evil Collection= provide key bindings for Emacs-Guix.

#+begin_src emacs-lisp
  (use-package guix
    :defer t)
#+end_src

* Guix Manifest
A manifest for guix package manager, used to install some packages.

#+begin_src scheme :tangle ~/dotfiles/guix/.config/guix/manifests/emacs.scm :noweb yes
  (specifications->manifest
   '(
     ;; "emacs-next"
     "emacs-next-pgtk"
     ;; "emacs-pgtk-native-comp"
     "emacs-vterm"
     "python-language-server"
     "sbcl"
     "ccls"
     "gcc-toolchain"
     "clang-toolchain"
     "make"
     "cmake"
     "perl"
     "ripgrep"
  ))
#+end_src
