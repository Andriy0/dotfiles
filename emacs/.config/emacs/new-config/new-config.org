#+startup: overview
#+title: My New Emacs Configuration
#+property: header-args :emacs-lisp :tangle init.el

* About
  This file is my attempt to rewrite my emacs config.
  It tangles to init.el and early-init.el

* Early Init

  #+begin_src emacs-lisp :tangle early-init.el
    ;; Packages will be initialized by use-package later.
    (setq package-enable-at-startup nil)
    (setq package-archives nil)

    ;; Defer garbage collection further back in the startup process
    (setq gc-cons-threshold (* 50 1000 1000))

    ;; Ignore X resources
    (advice-add #'x-apply-session-resources :override #'ignore)
    ;; TODO: Probably the better approach is:
    ;; (setq inhibit-x-resources t)

    ;; Do not resize the frame at this early stage.
    (setq frame-inhibit-implied-resize t)

    ;; Prevent unwanted runtime builds; packages are compiled ahead-of-time when
    ;; they are installed and site files are compiled when gccemacs is installed.
    (setq comp-deferred-compilation nil)

    ;; Change GUI
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)
  #+end_src

* Optimizations and Startup

  #+begin_src emacs-lisp
    (add-hook 'focus-out-hook 'garbage-collect)
    (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "Emacs ready in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))

     ;; Return gc-threshold to normal value
     (run-with-idle-timer
      5 nil
      (lambda ()
	(setq gc-cons-threshold (* 2 1000 1000))
	(message "gc-cons-threshold restored to %s"
		 gc-cons-threshold)))

  #+end_src

* Package System Setup
Emacs has a builtin package manager but it doesn't make it easy to automatically
install packages on a new system the first time you pull down your configuration.
[[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of packages.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  ;;  Effectively replace use-package with straight-use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;; (setq straight-check-for-modifications '(check-on-save find-when-checking))
  #+end_src

* UI Settings

  #+begin_src emacs-lisp
    (defvar efs/default-font-size 160)
    (defvar efs/default-variable-font-size 160)
    (defvar efs/default-font "mononoki")
    (defvar efs/default-theme 'modus-operandi)
    (defvar efs/frame-transparency '(90 . 90))
  #+end_src

** Useful Options

  #+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    (blink-cursor-mode 0)
    (setq make-backup-files nil
	  auto-save-default nil)
  #+end_src

** Font
   
  #+begin_src emacs-lisp
    (set-face-attribute 'default nil :font efs/default-font :height efs/default-font-size)
  #+end_src   

** Theme

  #+begin_src emacs-lisp
    (load-theme efs/default-theme t)
  #+end_src     

** Completions
*** History
  
    #+begin_src emacs-lisp
      (savehist-mode 1)
    #+end_src

*** Helm

    #+begin_src emacs-lisp
      ;; (straight-use-package 'helm)
      ;; (add-hook 'after-init-hook
      ;; 	  (lambda ()
      ;; 	    (run-with-idle-timer
      ;; 	     1 nil
      ;; 	     (lambda ()
      ;; 	  (message "Loading helm...")
      ;; 	  (require 'helm)))))

      (with-eval-after-load 'helm
	(add-hook 'after-init-hook 'helm-mode)
	(progn
	  (define-key minibuffer-local-map (kbd "C-r") 'helm-minibuffer-history)
	  (define-key global-map (kbd "M-x") 'helm-M-x)
	  (define-key global-map (kbd "C-x C-f") 'helm-find-files)
	  (define-key global-map (kbd "C-M-j") 'helm-buffers-list)
	  ))
    #+end_src

**** Helm-swoop

     #+begin_src emacs-lisp
       (straight-use-package 'helm-swoop)

       (with-eval-after-load 'helm
	 (require 'helm-swoop)

	 (progn
	   (define-key global-map (kbd "C-s") 'helm-swoop)
	   ))
     #+end_src
*** Vertico
**** Consult

     #+begin_src emacs-lisp
       (straight-use-package 'consult)
     #+end_src

**** Vertico

     #+begin_src emacs-lisp
       (straight-use-package 'vertico)
     #+end_src

* Org Mode
  
** Org Babel
*** Babel Languages

 #+begin_src emacs-lisp
   (with-eval-after-load 'org
     (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (lua . t)
	 (haskell . t)
	 (python . t)))

     (push '("conf-unix" . conf-unix) org-src-lang-modes))
 #+end_src

   

  
*** Structure Templates

 #+begin_src emacs-lisp
 (with-eval-after-load 'org
   ;; This is needed as of Org 9.2
   (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("xm" . "src xml"))
     (add-to-list 'org-structure-template-alist '("co" . "src conf-unix"))
     (add-to-list 'org-structure-template-alist '("lu" . "src lua"))
     (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
     (add-to-list 'org-structure-template-alist '("sc" . "src scheme")))
 #+end_src

   
